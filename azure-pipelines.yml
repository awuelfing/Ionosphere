# ASP.NET Core (.NET Framework)

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: AzureResourceManagerTemplateDeployment@3
  displayName: "Run ARM template"
  inputs:
    deploymentScope: 'Resource Group'
    azureResourceManagerConnection: 'Pay-As-You-Go(2a4e0346-ab89-4c4e-91a3-7b73249b2129)'
    subscriptionId: '2a4e0346-ab89-4c4e-91a3-7b73249b2129'
    action: 'Create Or Update Resource Group'
    resourceGroupName: 'rg-ionosphere'
    location: 'East US'
    templateLocation: 'URL of the file'
    csmFileLink: 'https://raw.githubusercontent.com/awuelfing/ionosphere/master/infrastructure/template.json'
    csmParametersFileLink: 'https://raw.githubusercontent.com/awuelfing/ionosphere/master/infrastructure/parameters.json'
    deploymentMode: 'Complete'
- task: NuGetToolInstaller@1
  displayName: 'Install NuGet'

- task: NuGetCommand@2
  displayName: 'NuGet restore for solution'
  inputs:
    restoreSolution: '$(solution)'
- task: PowerShell@2
  displayName: "Set secrets"
  env:
    HAMQTHUSERNAME: $(HAMQTHUSERNAME)
    HAMQTHPASSWORD: $(HAMQTHPASSWORD)
    MongoDbConnectionString: $(MongoDbConnectionString)
    MongoDbDatabase: $(MongoDbDatabase)
    MongoDbCollection: $(MongoDbCollection)
    MongoDbQueueCollection: $(MongoDbQueueCollection)
    JwtKey: $(JwtKey)
  inputs:
    targetType: 'inline'
    script: |
      if(Test-Path "./DxWs/appsettings.json")
      {
          [string]$contents = [System.IO.File]::ReadAllText("./DxWs/appsettings.json")
          $contents = $contents.Replace("ReplaceHamQTHUsername",${env:HAMQTHUSERNAME})
          $contents = $contents.Replace("ReplaceHamQTHPassword",${env:HAMQTHPASSWORD})
          $contents = $contents.Replace("ReplaceMongoDbConnectionString",${env:MongoDbConnectionString})
          $contents = $contents.Replace("ReplaceMongoDbDatabase",${env:MongoDbDatabase})
          $contents = $contents.Replace("ReplaceMongoDbCollection",${env:MongoDbCollection})
          $contents = $contents.Replace("ReplaceMongoDbQueueCollection",${env:MongoDbQueueCollection})
          $contents = $contents.Replace("ReplaceJwtKey",${env:JwtKey})
          [System.IO.File]::WriteAllText("./DxWs/appsettings.json",$contents)
      }
    workingDirectory: '$(Build.SourcesDirectory)'
- task: VSBuild@1
  displayName: "Build solution"
  inputs:
    solution: '$(solution)'
    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\DxWs\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
- task: VSTest@2
  displayName: "Run tests"
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: |
      **\DxLib.Tests.dll
      !**\obj\**
    searchFolder: '$(System.DefaultWorkingDirectory)'

- task: DotNetCoreCLI@2
  displayName: "Publish ClusterTaskRunnerLinux"
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: './ClusterTaskRunner/ClusterTaskRunner.csproj'
    arguments: '-o $(Build.ArtifactStagingDirectory)/ClusterTaskRunnerLinux -r linux-x64'
- task: DotNetCoreCLI@2
  displayName: "Publish TaskRunner"
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: './ClusterConsole/ClusterConsole.csproj'
    arguments: '-o $(Build.ArtifactStagingDirectory)/ClusterConsole'
- task: PowerShell@2
  displayName: "Rename ClusterConsole"
  inputs:
     targetType: 'inline'
     script: 'Move-Item -Path "./ClusterConsole/ClusterConsole.zip" -Destination "./ClusterConsole/ClusterConsole$([DateTime]::Now.ToString("_yyyyMMdd_hhmm")).zip"'
     workingDirectory: '$(Build.ArtifactStagingDirectory)'

- task: AzureRmWebAppDeployment@4
  displayName: "Push DxWs to Azure"
  inputs:
    ConnectionType: 'AzureRM'
    azureSubscription: 'Pay-As-You-Go(2a4e0346-ab89-4c4e-91a3-7b73249b2129)'
    appType: 'webApp'
    WebAppName: 'ionosphere'
    packageForLinux: '$(Build.ArtifactStagingDirectory)/DxWs/*.zip'
    

- task: AzureFileCopy@2
  displayName: "Copy ClusterConsole to Azure Blob"
  inputs:
    SourcePath: '$(Build.ArtifactStagingDirectory)/ClusterConsole/*.zip'
    azureSubscription: 'Pay-As-You-Go(2a4e0346-ab89-4c4e-91a3-7b73249b2129)'
    Destination: 'AzureBlob'
    storage: 'stionosphere001'
    ContainerName: 'Binaries'
    BlobPrefix: 'Current'
    CleanTargetBeforeCopy: true

- task: PublishBuildArtifacts@1
  displayName: "Publish all outputs to pipeline artifacts"
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
- task: PublishBuildArtifacts@1
  displayName: "Publish ClusterTaskRunnerLinux"
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/ClusterTaskRunnerLinux'
    ArtifactName: 'ClusterTaskRunner'
    publishLocation: 'Container'